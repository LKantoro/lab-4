---
title: "data-cleaning"
format: html
editor: visual
---

```{r}
#| context: setup
#| label: load-packages
#| message: false

```






```{r}
#| context: setup

library(tidyverse)
library(gt)
library(dplyr)
library(leaflet)
library(sf)
library(scales)
library(plotly)
library(readxl)
library(bslib)
library(bsicons)
library(shiny)
```


```{r}
#| context: setup
#| label: read-in-wellcome-data

#wgm2018_crosstab = read_excel(here::here("data", "wgm2018-dataset-crosstabs-all-countries.xlsx"), sheet = 1)

wgm2018_full = read_excel(here::here("data", "wgm2018-dataset-crosstabs-all-countries.xlsx"), sheet = 2)

wgm2018_dict = read_excel(here::here("data", "wgm2018-dataset-crosstabs-all-countries.xlsx"), sheet = 3)
```

```{r}
#| context: setup
#| label: country_label_prep

#creating string based on list provided
countriesstringsplit = str_split(wgm2018_dict[1,3], ',')

#changing the vector into a df and eliminating the last row, which was blank
countriesdf = as.data.frame(countriesstringsplit, col.names = c("country")) %>%
  filter(!row_number() %in% c(145))

#creating a two column data frame about the '=' and changing the code to numeric
countriesdf = countriesdf %>% 
  separate_wider_delim(country, delim = "=", 
                       names = c("country_code", "country_name")) %>% 
  mutate(country_code = as.numeric(country_code))
```

```{r}
#| context: setup
#| label: region_label_prep

#similar process for splitting regions, as was done above for countries

regionsstringsplit = str_split(wgm2018_dict[57,3], ',')

regionsdf = as.data.frame(regionsstringsplit, col.names = c("region")) %>%
  filter(!row_number() %in% c(20))

regionsdf = regionsdf %>% 
  separate_wider_delim(region, delim = "=", 
                       names =c("region_code", "region_name")) %>% 
  mutate(region_code = as.numeric(region_code))


#creating a new column for world region to be used to split the graph

regionsdf = regionsdf %>% mutate('map_region' = case_when(
          region_code %in% c(9,10,11,12, 18) ~ 'Asia and Australia',
          region_code %in% c(1,2,4,5) ~ 'Sub-Saharan Africa',
          region_code %in% c(6,7,8) ~ 'Americas',
          region_code %in% c(15,16,17) ~ 'Europe',
          region_code %in% c(3,13) ~ 'Middle East and North Africa',
          region_code == 14 ~ 'Former Soviet Union',
          region_code == 0 ~ 'Not Assigned'))
```

```{r}
#| context: setup
#| label: full_data_with_countries_and_regions

#merging to create full dataset to use in visuals
wgm2018_full_new1 = left_join(wgm2018_full, countriesdf, 
                              by = join_by(WP5 == country_code))

wgm2018_full_new2 = left_join(wgm2018_full_new1, regionsdf, 
                              by = join_by(Regions_Report == region_code))

countries_and_regions = wgm2018_full_new2 %>% 
  select(country_name, region_name, map_region) %>% distinct()

```



```{r}
#| context: setup
#| label: chloropleth_prep_1

#finding country geometries: https://r-graph-gallery.com/183-choropleth-map-with-leaflet.html

#download.file(
##  "https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/world_shape_file.zip",
#  destfile = "data/world_shape_file.zip"
#)

#system("unzip DATA/world_shape_file.zip")

world_sf <- read_sf(paste0(
  getwd(), "/data/world_shape_file/",
  "TM_WORLD_BORDERS_SIMPL-0.3.shp"
))
```

```{r}
#| context: setup
#| label: chloropleth_prep_2


country_counts = wgm2018_full_new2 %>% 
  group_by(country_name) %>% 
  summarise(total_count = n()) %>%
  rename('total_surveyed' = total_count)

#finding the count of people who are knowledgeable about science
trust_scientists_counts = wgm2018_full_new2 %>% 
  filter(Q11C %in% c('1', '2')) %>%
  group_by(country_name, map_region) %>% 
  summarise(total_trust = n()) 


#finding percent of people who are knowledgeable about science
percent_trust = inner_join(country_counts, trust_scientists_counts, 
                             by = join_by(country_name == country_name))


percent_trust$perc_trust = 
  round(percent_trust$total_trust/percent_trust$total_surveyed * 100,2)


#joining country geometries and overall data frame together
chloroplethdf = right_join(percent_trust, world_sf, 
                           by = join_by(country_name == NAME))

```


```{r}
#| context: setup
#| label: chloropleth_prep_3


#converting data.frame to sf for graphing using leaflet: https://r-spatial.github.io/sf/reference/sf.html
chloroplethdf = st_sf(chloroplethdf)


#chloroplethdf
```






```{r}

#| label: plotly_prep_1

#finding the count of surveyed people
country_counts = wgm2018_full_new2 %>% 
  group_by(country_name) %>% 
  summarise(total_count = n()) %>%
  rename('total_surveyed' = total_count)

#finding the count of people who think vaccines are effective
vaccine_effective_counts = wgm2018_full_new2 %>%
  filter(Q26 %in% c('1'), map_region != 'Not Assigned') %>%
  group_by(country_name, map_region) %>% 
  summarise(total_effective = n())
  

#finding the count of people who are knowledgeable about science
know_science_counts = wgm2018_full_new2 %>% 
  filter(Q1 %in% c('1', '2'), map_region != 'Not Assigned') %>%
  group_by(country_name, map_region) %>% 
  summarise(total_science = n()) 

```

```{r}
#| label: plotly_prep_2


#finding percent of people who think vaccines are effective
percent_effective = inner_join(country_counts, vaccine_effective_counts, 
                               by = join_by(country_name == country_name))

percent_effective$percent_eff = 
  percent_effective$total_effective/percent_effective$total_surveyed

#finding percent of people who are knowledgeable about science
percent_science = inner_join(country_counts, know_science_counts, 
                             by = join_by(country_name == country_name))

#finding proportion of people who are knowledgeable about science
percent_science$prop_sci = 
  percent_science$total_science/percent_science$total_surveyed


#joining effective counts with safe counts
percent_effective_and_science = left_join(percent_effective, percent_science, 
                                       by = join_by(country_name==country_name))


#rounding to 2 decimal places for cleanliness
percent_effective_and_science = percent_effective_and_science %>% 
  mutate(percent_eff = round(percent_eff, 2), prop_sci = round(prop_sci, 2))



```

```{r}
top30rate = wgm2018_full_new2 %>% 
  group_by(country_name, Q25) %>% 
  summarize(total_count = n()) %>%
  pivot_wider(names_from = 'Q25', values_from = 'total_count') %>%
  select(country_name, '1', '2', '3', '4', '5') %>%
  mutate(total = sum(c_across(1:5))) %>% 
  mutate(across(1:5, ~ . / total)) %>%
  rename("Strongly_Agree" = '1', "Somewhat_Agree" = '2', 
         "Neither" = '3', "Somewhat_Disagree" = '4',
         "Strongly_Disagree" = '5') %>% 
  arrange(desc(Strongly_Agree)) 


bottom30rate = wgm2018_full_new2 %>% 
  group_by(country_name, Q25) %>% 
  summarize(total_count = n()) %>%
  pivot_wider(names_from = 'Q25', values_from = 'total_count') %>%
  select(country_name, '1', '2', '3', '4', '5') %>%
  mutate(total = sum(c_across(1:5))) %>% 
  mutate(across(1:5, ~ . / total)) %>%
  rename("Strongly_Agree" = '1', "Somewhat_Agree" = '2', 
         "Neither" = '3', "Somewhat_Disagree" = '4',
         "Strongly_Disagree" = '5') %>% 
  arrange(desc(Strongly_Disagree))
```


```{r}
#| context: setup
#| label: valueboxes_prep

want_to_know_more_science = wgm2018_full_new2 %>% 
  count(Q8) %>% mutate(prop = prop.table(n)) %>% 
  filter(Q8 == '1') %>% 
  select(prop)


want_to_know_more_disease = wgm2018_full_new2 %>% 
  count(Q9) %>% mutate(prop = prop.table(n)) %>% 
  filter(Q9 == '1') %>% 
  select(prop)

disease_part_of_science = wgm2018_full_new2 %>% 
  count(Q3) %>% mutate(prop = prop.table(n)) %>% 
  filter(Q3 == '1') %>% 
  select(prop)


science_primary_school = wgm2018_full_new2 %>% 
  count(Q5A) %>% mutate(prop = prop.table(n)) %>% 
  filter(Q5A == '1') %>% 
  select(prop)

science_secondary_school = wgm2018_full_new2 %>% 
  count(Q5B) %>% mutate(prop = prop.table(n)) %>% 
  filter(Q5B == '1') %>% 
  select(prop)

science_college = wgm2018_full_new2 %>% 
  count(Q5C) %>% mutate(prop = prop.table(n)) %>% 
  filter(Q5C == '1') %>% 
  select(prop)


```

```{r}
#Q11C, trust in scientists

#percent of religious people who trust scientists
religious_trust_science = wgm2018_full_new2 %>% filter(D1 == '1') %>%
  count(Q12) %>% mutate(prop = prop.table(n)) %>%
  filter(Q12 == '1') %>% select(prop)


#percent of non-religious people who trust scientists
non_religious_trust_science = wgm2018_full_new2 %>% filter(D1 == '2') %>%
  count(Q12) %>% mutate(prop = prop.table(n)) %>%
  filter(Q12 == '1') %>% select(prop)
```


```{r}
#plotly-graph: percent_effective_and_science

#value-boxes: want_to_know_more_science, want_to_know_more_disease, disease_part_of_science, science_primary_school, science_secondary_school, science_college

#dotplot1: percent_effective
#dotplot2: percent_science

#table1: top30rate
#table2: bottom30rate

#chloropleth: chloroplethdf

#valuebox1: religious_trust_science
#valuebox2: non_religious_trust_science

#barplot: 
wgm2018_full_new2 %>% filter(Q12 %in% c(1,2,3,4)) %>% 
  filter(Education %in% c(1,2,3)) %>%
  ggplot(aes(x = factor(Education, levels = c('1', '2', '3'), 
                        labels = c('Primary','Secondary', 'Tertiary')),
             fill = factor(Q12, levels = c('4', '3', '2', '1'), 
                           labels = c('None', 'Little', 'Some', 'Strong')))) + 
  geom_bar(position = "fill") +
  scale_y_continuous(labels = scales::percent) +
  labs(x = 'Education Level', y = '', fill = 'Belief Level') +
  theme(legend.position = "right", panel.grid = element_blank(),
        axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
        plot.title.position = "plot", panel.grid.major = element_blank()) +
  scale_fill_manual(values = c('#f2cad2', '#f5d8e3', '#d3fdef', '#c3f9de')) +
  theme_minimal() +
  theme(panel.grid.minor = element_blank(), panel.grid.major.x =element_blank(),
        panel.grid.major.y =element_blank(), axis.ticks.x = element_blank())


```

```{r}


#plotly-graph: 
write.csv(percent_effective_and_science, "percent_effective_and_science.csv")

#value-boxes: 
write.csv(want_to_know_more_science, "want_to_know_more_science.csv")
write.csv(want_to_know_more_disease, "want_to_know_more_disease.csv")
write.csv(disease_part_of_science, "disease_part_of_science.csv") 
write.csv(science_primary_school, "science_primary_school.csv")
write.csv(science_secondary_school, "science_secondary_school.csv") 
write.csv(science_college, "science_college.csv")

#dotplot1: 
write.csv(percent_effective, "percent_effective.csv")
#dotplot2: 
write.csv(percent_science, "percent_science.csv")

#table1: 
write.csv(top30rate, "top30rate.csv")
#table2: 
write.csv(bottom30rate, "bottom30rate.csv")

#chloropleth: 

write.csv(percent_trust, "percent_trust.csv")

write.csv(chloroplethdf, "chloroplethdf.csv")


#valuebox1: 
write.csv(religious_trust_science, "religious_trust_science.csv")
#valuebox2: 
write.csv(non_religious_trust_science, "non_religious_trust_science.csv")

#barplot:
barplotdf = wgm2018_full_new2 %>% filter(Q12 %in% c(1,2,3,4)) %>% 
  filter(Education %in% c(1,2,3))

write.csv(wgm2018_full_new2, "wgm2018_full_new2.csv")


write.csv(barplotdf, "barplotdf.csv")



```




---
title: "Lucas Kantorowski"
format: 
  dashboard:
    orientation: columns
    theme: vapor
    nav-buttons:
      - icon: github
        href: https://github.com/LKantoro/lab-3
        aria-label: GitHub
      - icon: linkedin
        href: https://www.linkedin.com/in/lucas-kantorowski/
        aria-label: LinkedIn
server: shiny        
logo: images/wellcomelogo.png
logo-alt: Wellcome Organization Logo
---

```{r}
#use sliderbar for number of bins options for chloropleth 2,4,5,10,20

#use checkboxes for map regions in plotly graph (maybe try in dotplots)
```



```{r}
#| context: setup
#| label: load-packages
#| message: false

library(tidyverse)
library(gt)
library(dplyr)
library(leaflet)
library(sf)
library(scales)
library(plotly)
library(readxl)
library(bslib)
library(bsicons)
library(shiny)
```


```{r}
#| context: setup
#| label: read-in-wellcome-data

wgm2018_crosstab = read_excel(here::here("data", "wgm2018-dataset-crosstabs-all-countries.xlsx"), sheet = 1)

wgm2018_full = read_excel(here::here("data", "wgm2018-dataset-crosstabs-all-countries.xlsx"), sheet = 2)

wgm2018_dict = read_excel(here::here("data", "wgm2018-dataset-crosstabs-all-countries.xlsx"), sheet = 3)
```

```{r}
#| context: setup
#| label: country_label_prep

#creating string based on list provided
countriesstringsplit = str_split(wgm2018_dict[1,3], ',')

#changing the vector into a df and eliminating the last row, which was blank
countriesdf = as.data.frame(countriesstringsplit, col.names = c("country")) %>%
  filter(!row_number() %in% c(145))

#creating a two column data frame about the '=' and changing the code to numeric
countriesdf = countriesdf %>% 
  separate_wider_delim(country, delim = "=", 
                       names = c("country_code", "country_name")) %>% 
  mutate(country_code = as.numeric(country_code))
```

```{r}
#| context: setup
#| label: region_label_prep

#similar process for splitting regions, as was done above for countries

regionsstringsplit = str_split(wgm2018_dict[57,3], ',')

regionsdf = as.data.frame(regionsstringsplit, col.names = c("region")) %>%
  filter(!row_number() %in% c(20))

regionsdf = regionsdf %>% 
  separate_wider_delim(region, delim = "=", 
                       names =c("region_code", "region_name")) %>% 
  mutate(region_code = as.numeric(region_code))


#creating a new column for world region to be used to split the graph

regionsdf = regionsdf %>% mutate('map_region' = case_when(
          region_code %in% c(9,10,11,12, 18) ~ 'Asia and Australia',
          region_code %in% c(1,2,4,5) ~ 'Sub-Saharan Africa',
          region_code %in% c(6,7,8) ~ 'Americas',
          region_code %in% c(15,16,17) ~ 'Europe',
          region_code %in% c(3,13) ~ 'Middle East and North Africa',
          region_code == 14 ~ 'Former Soviet Union',
          region_code == 0 ~ 'Not Assigned'))
```

```{r}
#| context: setup
#| label: full_data_with_countries_and_regions

#merging to create full dataset to use in visuals
wgm2018_full_new1 = left_join(wgm2018_full, countriesdf, 
                              by = join_by(WP5 == country_code))

wgm2018_full_new2 = left_join(wgm2018_full_new1, regionsdf, 
                              by = join_by(Regions_Report == region_code))

countries_and_regions = wgm2018_full_new2 %>% 
  select(country_name, region_name, map_region) %>% distinct()

```






```{r}
#| context: setup
#| label: chloropleth_prep_1

#finding country geometries: https://r-graph-gallery.com/183-choropleth-map-with-leaflet.html

#download.file(
##  "https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/world_shape_file.zip",
#  destfile = "data/world_shape_file.zip"
#)

#system("unzip DATA/world_shape_file.zip")

world_sf <- read_sf(paste0(
  getwd(), "/data/world_shape_file/",
  "TM_WORLD_BORDERS_SIMPL-0.3.shp"
))
```

```{r}
#| context: setup
#| label: chloropleth_prep_2


country_counts = wgm2018_full_new2 %>% 
  group_by(country_name) %>% 
  summarise(total_count = n()) %>%
  rename('total_surveyed' = total_count)

#finding the count of people who are knowledgeable about science
trust_scientists_counts = wgm2018_full_new2 %>% 
  filter(Q11C %in% c('1', '2')) %>%
  group_by(country_name, map_region) %>% 
  summarise(total_trust = n()) 


#finding percent of people who are knowledgeable about science
percent_trust = inner_join(country_counts, trust_scientists_counts, 
                             by = join_by(country_name == country_name))


percent_trust$perc_trust = 
  round(percent_trust$total_trust/percent_trust$total_surveyed * 100,2)


#joining country geometries and overall data frame together
chloroplethdf = right_join(percent_trust, world_sf, 
                           by = join_by(country_name == NAME))

```


```{r}
#| context: setup
#| label: chloropleth_prep_3


#converting data.frame to sf for graphing using leaflet: https://r-spatial.github.io/sf/reference/sf.html
chloroplethdf = st_sf(chloroplethdf)
```



# {.sidebar}

```{r}
#| context: setup


#Create global sidebars by adding the .sidebar class to level 1 headings. Sidebars can include code cells as well as images, narrative, and links.



sliderInput('numBins', 'Number of Bins', 
            min=2, max=10,
            value=10, 
            step=1, round=0)
br()
p()
#checkboxInput('jitter', 'Jitter')
#checkboxInput('smooth', 'Smooth')
```


# Science vs. Vaccines

## Column - Plots {width="50%"}

### Row {height="75%"}

```{r}
#| context: setup


#https://rstudio.github.io/leaflet/articles/shiny.html
leafletOutput('mymap')
leafletOutput('mymap2')
```


::: {.card title="Percentage of Population Who Trust Scientists"}


```{r}
#| context: server
#| label: chloropleth1


#creating bins for coloring
binsdynamic = reactive({
  seq(0,100,length.out = input$numBins)
})

apple = reactive({input$numBins})


#binsstatic = 


#print(binsstatic)
  
#dataInput <- reactive({
#  getSymbols(input$symb, src = "yahoo",
##    from = input$dates[1],
#    to = input$dates[2],
#    auto.assign = FALSE)
#})

colorpal <- reactive({
  colorBin("Paired",domain = chloroplethdf$perc_trust,
               bins = seq(0,100,length.out = input$numBins))
})


#only include aspects of the map that wont need to be changed dynamically
output$mymap <- renderLeaflet({ 
  
  leaflet(chloroplethdf) %>% addTiles()  %>%
    setView(lng = 0, lat = 0, zoom = 2)
})

#aspects of map that will be changed dynamically

observe({
  
  pal <- colorpal()

  leafletProxy("mymap", data = chloroplethdf)  %>%clearShapes() %>%
    addPolygons(weight = .2, opacity = 1,
                fillColor = ~pal(perc_trust), 
                popup = ~paste(country_name, ":",perc_trust, '%'), 
                label = ~paste(country_name, ":",perc_trust, '%'), 
                stroke = FALSE)
    
})

observe({
    pal <- colorpal()

    leafletProxy("mymap", data = chloroplethdf) %>% 
    clearControls() %>%
    addLegend(pal = pal, 
              values = ~perc_trust, position = "bottomleft", 
              title = paste(class(pal), class(colorpal())), 
              labFormat = labelFormat(suffix = "%"))
    
  })

```



:::



